package org.example;

import com.pi4j.Pi4J;
import com.pi4j.context.Context;
import com.pi4j.io.gpio.digital.DigitalOutput;
import com.pi4j.io.pwm.Pwm;
import com.pi4j.io.pwm.PwmType;

public class MotorControl {

    public static void main(String[] args) throws InterruptedException {
        // Pi4J Context erstellen
        Context pi4j = Pi4J.newAutoContext();

        // GPIO-Pins definieren
        int directionPin = 5;// Pin für die Richtung
        int directionPinandereRichtung = 21;// Pin für die Richtung
        int pwmPin = 12;       // Pin für PWM

        // DigitalOutput für Richtung
        DigitalOutput direction = pi4j.dout().create(directionPin);
        DigitalOutput directionAndereRichtung = pi4j.dout().create(directionPinandereRichtung);

        // PWM für Geschwindigkeit
        Pwm pwm = pi4j.pwm().create(Pwm.newConfigBuilder(pi4j)
                .id("PWM")
                .name("Motor")
                .address(pwmPin)
                .pwmType(PwmType.SOFTWARE)
                .initial(0)
                .shutdown(0)
                .provider("pigpio-pwm")
                .build());

        try {
            // Vorwärts
            direction.high();
            directionAndereRichtung.low();
            pwm.on(75,200); // 75% Duty Cycle
            Thread.sleep(2000);

            direction.high();
            directionAndereRichtung.low();
            pwm.on(20,200); // 75% Duty Cycle
            Thread.sleep(2000);

            direction.high();
            directionAndereRichtung.low();
            pwm.on(75,200); // 75% Duty Cycle
            Thread.sleep(2000);

            // Stopp
            direction.low();
            directionAndereRichtung.low();
            pwm.off();
            Thread.sleep(300);

            // Rückwärts
            direction.low();
            directionAndereRichtung.high();
            pwm.on(50,75);
            Thread.sleep(2000);

            // Stopp
            pwm.off();
            Thread.sleep(2000);

            direction.low();
            directionAndereRichtung.low();

        } finally {
            // Ressourcen freigeben
            pwm.off();
            pi4j.shutdown();
        }
    }
}
